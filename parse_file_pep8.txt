=================================================== 
Python LINTER for: {parse_file}    
=================================================== 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
============================================================================ 

Generating Linter results for: parse_file.py on: 24/02/2025 22:11:32
========== pycodestyle (formerly pep8) ==========
parse_file.py:1:12: W291 trailing whitespace
import json
           ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:2:10: W291 trailing whitespace
import re
         ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:6:69: W291 trailing whitespace
''' Reading the json file content and passing for further proccesing
                                                                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:10:1: E302 expected 2 blank lines, found 1
def get_json_content(file):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:11:5: E265 block comment should start with '# '
    #opening and reading json file
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:11:35: W291 trailing whitespace
    #opening and reading json file
                                  ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:13:9: E265 block comment should start with '# '
        #returns a list of dictionaries
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:13:40: W291 trailing whitespace
        #returns a list of dictionaries
                                       ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:22:1: E302 expected 2 blank lines, found 1
def generate_email(first_name, last_name):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:23:5: E265 block comment should start with '# '
    #concatenating using a function
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:24:66: W291 trailing whitespace
    return f"{first_name[0].lower()}{last_name.lower()}@comp.com"
                                                                 ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:31:1: E302 expected 2 blank lines, found 1
def generate_formatted_file(emp_list, orig_path):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:31:50: W291 trailing whitespace
def generate_formatted_file(emp_list, orig_path):
                                                 ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:32:5: E265 block comment should start with '# '
    #getting the directory where the original file is located
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:34:5: E265 block comment should start with '# '
    #extracting the base file name
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:36:5: E265 block comment should start with '# '
    #spliting the base name into name and extension
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:38:5: E265 block comment should start with '# '
    #creating the new file name with "_formatted.json" appended.
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:40:1: W293 blank line contains whitespace

^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:41:5: E265 block comment should start with '# '
    #writing the formatted employee data to the new JSON file.
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:46:68: W291 trailing whitespace
''' Calculating salaryes according to the base salary per possition
                                                                   ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:47:37: W291 trailing whitespace
                        "SA": 60000,
                                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:48:37: W291 trailing whitespace
                        "HR": 70000,
                                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:49:36: W291 trailing whitespace
                        "IT": 80000
                                   ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:51:48: W291 trailing whitespace
            "NY", "CA", "OR", "WA", "VT" states
                                               ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:54:1: E302 expected 2 blank lines, found 1
def generate_salary(job_id, state):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:55:5: E265 block comment should start with '# '
    #extracting department from job_id
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:57:5: E265 block comment should start with '# '
    #base salary for each department
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:59:21: W291 trailing whitespace
        "SA": 60000,
                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:60:21: W291 trailing whitespace
        "HR": 70000,
                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:61:20: W291 trailing whitespace
        "IT": 80000
                   ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:63:5: E265 block comment should start with '# '
    #retrieving base salary
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:67:5: E265 block comment should start with '# '
    #checking if the person is a manager
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:69:5: E265 block comment should start with '# '
    #applying salary increases based on conditions
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:71:31: E262 inline comment should start with '# '
        base_salary *= 1.065  #manager in bonus state gets 6.5% increase
                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:73:31: E262 inline comment should start with '# '
        base_salary *= 1.05   #manager in non-bonus state gets 5% increase
                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:75:31: E262 inline comment should start with '# '
        base_salary *= 1.015  #non-managers in bonus states get 1.5% increase
                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:77:5: E265 block comment should start with '# '
    #rounding the amount and passing it as integer
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:83:1: E302 expected 2 blank lines, found 1
def validate_phone_number(phone_number):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:85:5: E265 block comment should start with '# '
    #allowing numbers with +1 to pass through
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:87:38: E262 inline comment should start with '# '
        if " " not in phone_number:  #if +1 number has no spaces, reject it
                                     ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:88:80: E501 line too long (110 > 79 characters)
            print(f"{phone_number} is not a valid US phone number, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:92:5: E265 block comment should start with '# '
    #cleaning the Number removing `()`, `-`, spaces
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:93:80: E501 line too long (99 > 79 characters)
    phone_number = phone_number.replace("(", "").replace(")", "").replace(" ", "").replace("-", "")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:95:5: E265 block comment should start with '# '
    #remove all remaining non-numeric characters**
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:98:5: E265 block comment should start with '# '
    #reject if it's exactly 11 digits and does NOTnot start with +1
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:100:80: E501 line too long (106 > 79 characters)
        print(f"{phone_number} is not a valid US phone number, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:101:19: E262 inline comment should start with '# '
        return 1  #reject only if it's 11 digits and NOT a `+1` number
                  ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:103:5: E265 block comment should start with '# '
    #if it's 11 digits but starts with 1, remove the leading 1
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:107:5: E265 block comment should start with '# '
    #ensure the final number is exactly 10 digits**
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:111:5: E265 block comment should start with '# '
    #if invalid, print the error message and return 1**
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:112:80: E501 line too long (102 > 79 characters)
    print(f"{phone_number} is not a valid US phone number, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:116:59: W291 trailing whitespace
""" Validating  zip codes, ensuring it is exactly 5 digits
                                                          ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:120:1: E302 expected 2 blank lines, found 1
def validate_zip(zip_code):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:121:5: E265 block comment should start with '# '
    #storing the original input
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:122:28: W291 trailing whitespace
    original_zip = zip_code
                           ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:123:4: E114 indentation is not a multiple of 4 (comment)
   #reject any zip codes that start with +
   ^
    Use indent_size (PEP8 says 4) spaces per indentation level.

For really old code that you don't want to mess up, you can continue
to use 8-space tabs.

Okay: a = 1
Okay: if a == 0:\n    a = 1
E111:   a = 1
E114:   # a = 1

Okay: for item in items:\n    pass
E112: for item in items:\npass
E115: for item in items:\n# Hi\n    pass

Okay: a = 1\nb = 2
E113: a = 1\n    b = 2
E116: a = 1\n    # b = 2
parse_file.py:123:4: E265 block comment should start with '# '
   #reject any zip codes that start with +
   ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:125:80: E501 line too long (102 > 79 characters)
        print(f"{original_zip} is not a valid US zip code, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:127:5: E265 block comment should start with '# '
    #removing all non-numeric characters
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:128:49: W291 trailing whitespace
    cleaned_zip = re.sub(r"[^\d]", "", zip_code)
                                                ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:129:5: E265 block comment should start with '# '
    #ensure it's exactly 5 digits
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:132:5: E265 block comment should start with '# '
    #if invalid, print the error message using the original input and return 1
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:133:80: E501 line too long (98 > 79 characters)
    print(f"{original_zip} is not a valid US zip code, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:140:1: W293 blank line contains whitespace

^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:143:1: E302 expected 2 blank lines, found 1
def process_each_emp(emp_list):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:144:5: E265 block comment should start with '# '
    #creating an empty list for storing valid phone numbers and zip codes
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:144:74: W291 trailing whitespace
    #creating an empty list for storing valid phone numbers and zip codes
                                                                         ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:153:21: W291 trailing whitespace
            continue
                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:155:10: E114 indentation is not a multiple of 4 (comment)
         #validate zip code before proceeding
         ^
    Use indent_size (PEP8 says 4) spaces per indentation level.

For really old code that you don't want to mess up, you can continue
to use 8-space tabs.

Okay: a = 1
Okay: if a == 0:\n    a = 1
E111:   a = 1
E114:   # a = 1

Okay: for item in items:\n    pass
E112: for item in items:\npass
E115: for item in items:\n# Hi\n    pass

Okay: a = 1\nb = 2
E113: a = 1\n    b = 2
E116: a = 1\n    # b = 2
parse_file.py:155:10: E116 unexpected indentation (comment)
         #validate zip code before proceeding
         ^
    Use indent_size (PEP8 says 4) spaces per indentation level.

For really old code that you don't want to mess up, you can continue
to use 8-space tabs.

Okay: a = 1
Okay: if a == 0:\n    a = 1
E111:   a = 1
E114:   # a = 1

Okay: for item in items:\n    pass
E112: for item in items:\npass
E115: for item in items:\n# Hi\n    pass

Okay: a = 1\nb = 2
E113: a = 1\n    b = 2
E116: a = 1\n    # b = 2
parse_file.py:155:10: E265 block comment should start with '# '
         #validate zip code before proceeding
         ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:157:23: W291 trailing whitespace
        if zip_c == 1:
                      ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:158:23: E262 inline comment should start with '# '
            continue  #skip this entry if zip is invalid
                      ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:163:75: W291 trailing whitespace
            emp["City"] = re.sub(r'\s+', ' ', emp["City"]).strip().title()
                                                                          ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:165:80: E501 line too long (84 > 79 characters)
            emp["Job Title"] = re.sub(r'\s+', ' ', emp["Job Title"]).strip().title()
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:166:1: W293 blank line contains whitespace

^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:167:9: E265 block comment should start with '# '
        #creating new variables for processing names and address lines separately
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:167:80: E501 line too long (81 > 79 characters)
        #creating new variables for processing names and address lines separately
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:169:42: E231 missing whitespace after ','
        address_lines = ["Address Line 1","Address Line 2"]
                                         ^
    Surround operators with the correct amount of whitespace.

- Always surround these binary operators with a single space on
  either side: assignment (=), augmented assignment (+=, -= etc.),
  comparisons (==, <, >, !=, <=, >=, in, not in, is, is not),
  Booleans (and, or, not).

- Each comma, semicolon or colon should be followed by whitespace.

- If operators with different priorities are used, consider adding
  whitespace around the operators with the lowest priorities.

Okay: i = i + 1
Okay: submitted += 1
Okay: x = x * 2 - 1
Okay: hypot2 = x * x + y * y
Okay: c = (a + b) * (a - b)
Okay: foo(bar, key='word', *args, **kwargs)
Okay: alpha[:-i]
Okay: [a, b]
Okay: (3,)
Okay: a[3,] = 1
Okay: a[1:4]
Okay: a[:4]
Okay: a[1:]
Okay: a[1:4:2]

E225: i=i+1
E225: submitted +=1
E225: x = x /2 - 1
E225: z = x **y
E225: z = 1and 1
E226: c = (a+b) * (a-b)
E226: hypot2 = x*x + y*y
E227: c = a|b
E228: msg = fmt%(errno, errmsg)
E231: ['a','b']
E231: foo(bar,baz)
E231: [{'a':'b'}]
parse_file.py:170:9: E265 block comment should start with '# '
        #proccesing first and last name
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:172:50: E231 missing whitespace after ','
            if key in emp and isinstance(emp[key],str):
                                                 ^
    Surround operators with the correct amount of whitespace.

- Always surround these binary operators with a single space on
  either side: assignment (=), augmented assignment (+=, -= etc.),
  comparisons (==, <, >, !=, <=, >=, in, not in, is, is not),
  Booleans (and, or, not).

- Each comma, semicolon or colon should be followed by whitespace.

- If operators with different priorities are used, consider adding
  whitespace around the operators with the lowest priorities.

Okay: i = i + 1
Okay: submitted += 1
Okay: x = x * 2 - 1
Okay: hypot2 = x * x + y * y
Okay: c = (a + b) * (a - b)
Okay: foo(bar, key='word', *args, **kwargs)
Okay: alpha[:-i]
Okay: [a, b]
Okay: (3,)
Okay: a[3,] = 1
Okay: a[1:4]
Okay: a[:4]
Okay: a[1:]
Okay: a[1:4:2]

E225: i=i+1
E225: submitted +=1
E225: x = x /2 - 1
E225: z = x **y
E225: z = 1and 1
E226: c = (a+b) * (a-b)
E226: hypot2 = x*x + y*y
E227: c = a|b
E228: msg = fmt%(errno, errmsg)
E231: ['a','b']
E231: foo(bar,baz)
E231: [{'a':'b'}]
parse_file.py:173:17: E265 block comment should start with '# '
                #removing leading and treiling spaces
                ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:173:54: W291 trailing whitespace
                #removing leading and treiling spaces
                                                     ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:175:17: E265 block comment should start with '# '
                #applying title casing to the first and last names
                ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:177:9: E265 block comment should start with '# '
        #proccesing address lines
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:182:17: E265 block comment should start with '# '
                #creating empty list for new addresses
                ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:182:55: W291 trailing whitespace
                #creating empty list for new addresses
                                                      ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:185:47: W291 trailing whitespace
                if word and word[0].isdigit():
                                              ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:186:55: E262 inline comment should start with '# '
                    new_address.append(word.lower())  #lowercase if starting with digit
                                                      ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:186:80: E501 line too long (87 > 79 characters)
                    new_address.append(word.lower())  #lowercase if starting with digit
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:188:60: E262 inline comment should start with '# '
                    new_address.append(word.capitalize())  #capitalize otherwise
                                                           ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:188:80: E501 line too long (80 > 79 characters)
                    new_address.append(word.capitalize())  #capitalize otherwise
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:190:47: E262 inline comment should start with '# '
            emp[key] = ' '.join(new_address)  #convert list back to string
                                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:193:80: E501 line too long (82 > 79 characters)
        emp["Company Email"] = generate_email(emp["First Name"], emp["Last Name"])
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:196:9: E265 block comment should start with '# '
        #add proccesed employees to valid employees
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:198:5: E265 block comment should start with '# '
    #returning list of dictionaries for valid employees
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment

===================== pylint =====================
************* Module parse_file
parse_file.py:1:11: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:2:9: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:11:34: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:13:39: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:24:65: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:31:49: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:46:67: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:88:0: C0301: Line too long (110/100) (line-too-long)
parse_file.py:100:0: C0301: Line too long (106/100) (line-too-long)
parse_file.py:112:0: C0301: Line too long (102/100) (line-too-long)
parse_file.py:116:58: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:122:27: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:125:0: C0301: Line too long (102/100) (line-too-long)
parse_file.py:128:48: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:144:73: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:153:20: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:157:22: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:163:74: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:166:0: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:173:53: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:182:54: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:185:46: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:1:0: C0114: Missing module docstring (missing-module-docstring)
parse_file.py:6:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:10:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:17:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:22:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:27:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:31:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:46:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:54:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:81:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:83:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:116:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:120:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:137:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:143:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:184:24: E0606: Possibly using variable 'words' before assignment (possibly-used-before-assignment)
parse_file.py:186:20: E0606: Possibly using variable 'new_address' before assignment (possibly-used-before-assignment)

-----------------------------------
Your code has been rated at 5.20/10


============================================================================ 
=================================================== 
Python LINTER for: {parse_file}    
=================================================== 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
============================================================================ 

Generating Linter results for: parse_file.py on: 24/02/2025 22:16:31
========== pycodestyle (formerly pep8) ==========
parse_file.py:1:12: W291 trailing whitespace
import json
           ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:2:10: W291 trailing whitespace
import re
         ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:6:69: W291 trailing whitespace
''' Reading the json file content and passing for further proccesing
                                                                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:10:1: E302 expected 2 blank lines, found 1
def get_json_content(file):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:11:5: E265 block comment should start with '# '
    #opening and reading json file
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:11:35: W291 trailing whitespace
    #opening and reading json file
                                  ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:13:9: E265 block comment should start with '# '
        #returns a list of dictionaries
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:13:40: W291 trailing whitespace
        #returns a list of dictionaries
                                       ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:22:1: E302 expected 2 blank lines, found 1
def generate_email(first_name, last_name):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:23:5: E265 block comment should start with '# '
    #concatenating using a function
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:24:66: W291 trailing whitespace
    return f"{first_name[0].lower()}{last_name.lower()}@comp.com"
                                                                 ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:31:1: E302 expected 2 blank lines, found 1
def generate_formatted_file(emp_list, orig_path):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:31:50: W291 trailing whitespace
def generate_formatted_file(emp_list, orig_path):
                                                 ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:32:5: E265 block comment should start with '# '
    #getting the directory where the original file is located
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:34:5: E265 block comment should start with '# '
    #extracting the base file name
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:36:5: E265 block comment should start with '# '
    #spliting the base name into name and extension
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:38:5: E265 block comment should start with '# '
    #creating the new file name with "_formatted.json" appended.
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:40:1: W293 blank line contains whitespace

^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:41:5: E265 block comment should start with '# '
    #writing the formatted employee data to the new JSON file.
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:46:68: W291 trailing whitespace
''' Calculating salaryes according to the base salary per possition
                                                                   ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:47:37: W291 trailing whitespace
                        "SA": 60000,
                                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:48:37: W291 trailing whitespace
                        "HR": 70000,
                                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:49:36: W291 trailing whitespace
                        "IT": 80000
                                   ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:51:48: W291 trailing whitespace
            "NY", "CA", "OR", "WA", "VT" states
                                               ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:54:1: E302 expected 2 blank lines, found 1
def generate_salary(job_id, state):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:55:5: E265 block comment should start with '# '
    #extracting department from job_id
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:57:5: E265 block comment should start with '# '
    #base salary for each department
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:59:21: W291 trailing whitespace
        "SA": 60000,
                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:60:21: W291 trailing whitespace
        "HR": 70000,
                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:61:20: W291 trailing whitespace
        "IT": 80000
                   ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:63:5: E265 block comment should start with '# '
    #retrieving base salary
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:67:5: E265 block comment should start with '# '
    #checking if the person is a manager
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:69:5: E265 block comment should start with '# '
    #applying salary increases based on conditions
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:71:31: E262 inline comment should start with '# '
        base_salary *= 1.065  #manager in bonus state gets 6.5% increase
                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:73:31: E262 inline comment should start with '# '
        base_salary *= 1.05   #manager in non-bonus state gets 5% increase
                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:75:31: E262 inline comment should start with '# '
        base_salary *= 1.015  #non-managers in bonus states get 1.5% increase
                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:77:5: E265 block comment should start with '# '
    #rounding the amount and passing it as integer
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:83:1: E302 expected 2 blank lines, found 1
def validate_phone_number(phone_number):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:85:5: E265 block comment should start with '# '
    #allowing numbers with +1 to pass through
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:87:38: E262 inline comment should start with '# '
        if " " not in phone_number:  #if +1 number has no spaces, reject it
                                     ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:88:80: E501 line too long (110 > 79 characters)
            print(f"{phone_number} is not a valid US phone number, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:92:5: E265 block comment should start with '# '
    #cleaning the Number removing `()`, `-`, spaces
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:93:80: E501 line too long (99 > 79 characters)
    phone_number = phone_number.replace("(", "").replace(")", "").replace(" ", "").replace("-", "")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:95:5: E265 block comment should start with '# '
    #remove all remaining non-numeric characters**
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:98:5: E265 block comment should start with '# '
    #reject if it's exactly 11 digits and does NOTnot start with +1
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:100:80: E501 line too long (106 > 79 characters)
        print(f"{phone_number} is not a valid US phone number, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:101:19: E262 inline comment should start with '# '
        return 1  #reject only if it's 11 digits and NOT a `+1` number
                  ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:103:5: E265 block comment should start with '# '
    #if it's 11 digits but starts with 1, remove the leading 1
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:107:5: E265 block comment should start with '# '
    #ensure the final number is exactly 10 digits**
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:111:5: E265 block comment should start with '# '
    #if invalid, print the error message and return 1**
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:112:80: E501 line too long (102 > 79 characters)
    print(f"{phone_number} is not a valid US phone number, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:116:59: W291 trailing whitespace
""" Validating  zip codes, ensuring it is exactly 5 digits
                                                          ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:120:1: E302 expected 2 blank lines, found 1
def validate_zip(zip_code):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:121:5: E265 block comment should start with '# '
    #storing the original input
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:122:28: W291 trailing whitespace
    original_zip = zip_code
                           ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:123:4: E114 indentation is not a multiple of 4 (comment)
   #reject any zip codes that start with +
   ^
    Use indent_size (PEP8 says 4) spaces per indentation level.

For really old code that you don't want to mess up, you can continue
to use 8-space tabs.

Okay: a = 1
Okay: if a == 0:\n    a = 1
E111:   a = 1
E114:   # a = 1

Okay: for item in items:\n    pass
E112: for item in items:\npass
E115: for item in items:\n# Hi\n    pass

Okay: a = 1\nb = 2
E113: a = 1\n    b = 2
E116: a = 1\n    # b = 2
parse_file.py:123:4: E265 block comment should start with '# '
   #reject any zip codes that start with +
   ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:125:80: E501 line too long (102 > 79 characters)
        print(f"{original_zip} is not a valid US zip code, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:127:5: E265 block comment should start with '# '
    #removing all non-numeric characters
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:128:49: W291 trailing whitespace
    cleaned_zip = re.sub(r"[^\d]", "", zip_code)
                                                ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:129:5: E265 block comment should start with '# '
    #ensure it's exactly 5 digits
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:132:5: E265 block comment should start with '# '
    #if invalid, print the error message using the original input and return 1
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:133:80: E501 line too long (98 > 79 characters)
    print(f"{original_zip} is not a valid US zip code, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:140:1: W293 blank line contains whitespace

^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:143:1: E302 expected 2 blank lines, found 1
def process_each_emp(emp_list):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:144:5: E265 block comment should start with '# '
    #creating an empty list for storing valid phone numbers and zip codes
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:144:74: W291 trailing whitespace
    #creating an empty list for storing valid phone numbers and zip codes
                                                                         ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:153:21: W291 trailing whitespace
            continue
                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:155:10: E114 indentation is not a multiple of 4 (comment)
         #validate zip code before proceeding
         ^
    Use indent_size (PEP8 says 4) spaces per indentation level.

For really old code that you don't want to mess up, you can continue
to use 8-space tabs.

Okay: a = 1
Okay: if a == 0:\n    a = 1
E111:   a = 1
E114:   # a = 1

Okay: for item in items:\n    pass
E112: for item in items:\npass
E115: for item in items:\n# Hi\n    pass

Okay: a = 1\nb = 2
E113: a = 1\n    b = 2
E116: a = 1\n    # b = 2
parse_file.py:155:10: E116 unexpected indentation (comment)
         #validate zip code before proceeding
         ^
    Use indent_size (PEP8 says 4) spaces per indentation level.

For really old code that you don't want to mess up, you can continue
to use 8-space tabs.

Okay: a = 1
Okay: if a == 0:\n    a = 1
E111:   a = 1
E114:   # a = 1

Okay: for item in items:\n    pass
E112: for item in items:\npass
E115: for item in items:\n# Hi\n    pass

Okay: a = 1\nb = 2
E113: a = 1\n    b = 2
E116: a = 1\n    # b = 2
parse_file.py:155:10: E265 block comment should start with '# '
         #validate zip code before proceeding
         ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:157:23: W291 trailing whitespace
        if zip_c == 1:
                      ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:158:23: E262 inline comment should start with '# '
            continue  #skip this entry if zip is invalid
                      ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:163:75: W291 trailing whitespace
            emp["City"] = re.sub(r'\s+', ' ', emp["City"]).strip().title()
                                                                          ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:165:80: E501 line too long (84 > 79 characters)
            emp["Job Title"] = re.sub(r'\s+', ' ', emp["Job Title"]).strip().title()
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:166:1: W293 blank line contains whitespace

^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:167:9: E265 block comment should start with '# '
        #creating new variables for processing names and address lines separately
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:167:80: E501 line too long (81 > 79 characters)
        #creating new variables for processing names and address lines separately
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:169:42: E231 missing whitespace after ','
        address_lines = ["Address Line 1","Address Line 2"]
                                         ^
    Surround operators with the correct amount of whitespace.

- Always surround these binary operators with a single space on
  either side: assignment (=), augmented assignment (+=, -= etc.),
  comparisons (==, <, >, !=, <=, >=, in, not in, is, is not),
  Booleans (and, or, not).

- Each comma, semicolon or colon should be followed by whitespace.

- If operators with different priorities are used, consider adding
  whitespace around the operators with the lowest priorities.

Okay: i = i + 1
Okay: submitted += 1
Okay: x = x * 2 - 1
Okay: hypot2 = x * x + y * y
Okay: c = (a + b) * (a - b)
Okay: foo(bar, key='word', *args, **kwargs)
Okay: alpha[:-i]
Okay: [a, b]
Okay: (3,)
Okay: a[3,] = 1
Okay: a[1:4]
Okay: a[:4]
Okay: a[1:]
Okay: a[1:4:2]

E225: i=i+1
E225: submitted +=1
E225: x = x /2 - 1
E225: z = x **y
E225: z = 1and 1
E226: c = (a+b) * (a-b)
E226: hypot2 = x*x + y*y
E227: c = a|b
E228: msg = fmt%(errno, errmsg)
E231: ['a','b']
E231: foo(bar,baz)
E231: [{'a':'b'}]
parse_file.py:170:9: E265 block comment should start with '# '
        #proccesing first and last name
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:172:50: E231 missing whitespace after ','
            if key in emp and isinstance(emp[key],str):
                                                 ^
    Surround operators with the correct amount of whitespace.

- Always surround these binary operators with a single space on
  either side: assignment (=), augmented assignment (+=, -= etc.),
  comparisons (==, <, >, !=, <=, >=, in, not in, is, is not),
  Booleans (and, or, not).

- Each comma, semicolon or colon should be followed by whitespace.

- If operators with different priorities are used, consider adding
  whitespace around the operators with the lowest priorities.

Okay: i = i + 1
Okay: submitted += 1
Okay: x = x * 2 - 1
Okay: hypot2 = x * x + y * y
Okay: c = (a + b) * (a - b)
Okay: foo(bar, key='word', *args, **kwargs)
Okay: alpha[:-i]
Okay: [a, b]
Okay: (3,)
Okay: a[3,] = 1
Okay: a[1:4]
Okay: a[:4]
Okay: a[1:]
Okay: a[1:4:2]

E225: i=i+1
E225: submitted +=1
E225: x = x /2 - 1
E225: z = x **y
E225: z = 1and 1
E226: c = (a+b) * (a-b)
E226: hypot2 = x*x + y*y
E227: c = a|b
E228: msg = fmt%(errno, errmsg)
E231: ['a','b']
E231: foo(bar,baz)
E231: [{'a':'b'}]
parse_file.py:173:17: E265 block comment should start with '# '
                #removing leading and treiling spaces
                ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:173:54: W291 trailing whitespace
                #removing leading and treiling spaces
                                                     ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:175:17: E265 block comment should start with '# '
                #applying title casing to the first and last names
                ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:177:9: E265 block comment should start with '# '
        #proccesing address lines
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:182:17: E265 block comment should start with '# '
                #creating empty list for new addresses
                ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:182:55: W291 trailing whitespace
                #creating empty list for new addresses
                                                      ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:185:47: W291 trailing whitespace
                if word and word[0].isdigit():
                                              ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:186:55: E262 inline comment should start with '# '
                    new_address.append(word.lower())  #lowercase if starting with digit
                                                      ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:186:80: E501 line too long (87 > 79 characters)
                    new_address.append(word.lower())  #lowercase if starting with digit
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:188:60: E262 inline comment should start with '# '
                    new_address.append(word.capitalize())  #capitalize otherwise
                                                           ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:188:80: E501 line too long (80 > 79 characters)
                    new_address.append(word.capitalize())  #capitalize otherwise
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:190:47: E262 inline comment should start with '# '
            emp[key] = ' '.join(new_address)  #convert list back to string
                                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:193:80: E501 line too long (82 > 79 characters)
        emp["Company Email"] = generate_email(emp["First Name"], emp["Last Name"])
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:196:9: E265 block comment should start with '# '
        #add proccesed employees to valid employees
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:198:5: E265 block comment should start with '# '
    #returning list of dictionaries for valid employees
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment

===================== pylint =====================
************* Module parse_file
parse_file.py:1:11: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:2:9: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:11:34: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:13:39: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:24:65: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:31:49: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:46:67: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:88:0: C0301: Line too long (110/100) (line-too-long)
parse_file.py:100:0: C0301: Line too long (106/100) (line-too-long)
parse_file.py:112:0: C0301: Line too long (102/100) (line-too-long)
parse_file.py:116:58: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:122:27: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:125:0: C0301: Line too long (102/100) (line-too-long)
parse_file.py:128:48: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:144:73: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:153:20: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:157:22: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:163:74: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:166:0: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:173:53: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:182:54: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:185:46: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:1:0: C0114: Missing module docstring (missing-module-docstring)
parse_file.py:6:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:10:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:17:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:22:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:27:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:31:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:46:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:54:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:81:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:83:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:116:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:120:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:137:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:143:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:184:24: E0606: Possibly using variable 'words' before assignment (possibly-used-before-assignment)
parse_file.py:186:20: E0606: Possibly using variable 'new_address' before assignment (possibly-used-before-assignment)

------------------------------------------------------------------
Your code has been rated at 5.20/10 (previous run: 5.20/10, +0.00)


============================================================================ 
=================================================== 
Python LINTER for: {parse_file}    
=================================================== 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
============================================================================ 

Generating Linter results for: parse_file.py on: 24/02/2025 22:24:04
========== pycodestyle (formerly pep8) ==========
parse_file.py:1:12: W291 trailing whitespace
import json
           ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:2:10: W291 trailing whitespace
import re
         ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:6:69: W291 trailing whitespace
''' Reading the json file content and passing for further proccesing
                                                                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:10:1: E302 expected 2 blank lines, found 1
def get_json_content(file):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:11:5: E265 block comment should start with '# '
    #opening and reading json file
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:11:35: W291 trailing whitespace
    #opening and reading json file
                                  ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:13:9: E265 block comment should start with '# '
        #returns a list of dictionaries
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:13:40: W291 trailing whitespace
        #returns a list of dictionaries
                                       ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:22:1: E302 expected 2 blank lines, found 1
def generate_email(first_name, last_name):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:23:5: E265 block comment should start with '# '
    #concatenating using a function
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:24:66: W291 trailing whitespace
    return f"{first_name[0].lower()}{last_name.lower()}@comp.com"
                                                                 ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:31:1: E302 expected 2 blank lines, found 1
def generate_formatted_file(emp_list, orig_path):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:31:50: W291 trailing whitespace
def generate_formatted_file(emp_list, orig_path):
                                                 ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:32:5: E265 block comment should start with '# '
    #getting the directory where the original file is located
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:34:5: E265 block comment should start with '# '
    #extracting the base file name
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:36:5: E265 block comment should start with '# '
    #spliting the base name into name and extension
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:38:5: E265 block comment should start with '# '
    #creating the new file name with "_formatted.json" appended.
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:40:1: W293 blank line contains whitespace

^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:41:5: E265 block comment should start with '# '
    #writing the formatted employee data to the new JSON file.
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:46:68: W291 trailing whitespace
''' Calculating salaryes according to the base salary per possition
                                                                   ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:47:37: W291 trailing whitespace
                        "SA": 60000,
                                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:48:37: W291 trailing whitespace
                        "HR": 70000,
                                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:49:36: W291 trailing whitespace
                        "IT": 80000
                                   ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:51:48: W291 trailing whitespace
            "NY", "CA", "OR", "WA", "VT" states
                                               ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:54:1: E302 expected 2 blank lines, found 1
def generate_salary(job_id, state):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:55:5: E265 block comment should start with '# '
    #extracting department from job_id
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:57:5: E265 block comment should start with '# '
    #base salary for each department
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:59:21: W291 trailing whitespace
        "SA": 60000,
                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:60:21: W291 trailing whitespace
        "HR": 70000,
                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:61:20: W291 trailing whitespace
        "IT": 80000
                   ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:63:5: E265 block comment should start with '# '
    #retrieving base salary
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:67:5: E265 block comment should start with '# '
    #checking if the person is a manager
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:69:5: E265 block comment should start with '# '
    #applying salary increases based on conditions
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:71:31: E262 inline comment should start with '# '
        base_salary *= 1.065  #manager in bonus state gets 6.5% increase
                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:73:31: E262 inline comment should start with '# '
        base_salary *= 1.05   #manager in non-bonus state gets 5% increase
                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:75:31: E262 inline comment should start with '# '
        base_salary *= 1.015  #non-managers in bonus states get 1.5% increase
                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:77:5: E265 block comment should start with '# '
    #rounding the amount and passing it as integer
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:83:1: E302 expected 2 blank lines, found 1
def validate_phone_number(phone_number):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:85:5: E265 block comment should start with '# '
    #allowing numbers with +1 to pass through
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:87:38: E262 inline comment should start with '# '
        if " " not in phone_number:  #if +1 number has no spaces, reject it
                                     ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:88:80: E501 line too long (110 > 79 characters)
            print(f"{phone_number} is not a valid US phone number, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:92:5: E265 block comment should start with '# '
    #cleaning the Number removing `()`, `-`, spaces
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:93:80: E501 line too long (99 > 79 characters)
    phone_number = phone_number.replace("(", "").replace(")", "").replace(" ", "").replace("-", "")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:95:5: E265 block comment should start with '# '
    #remove all remaining non-numeric characters**
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:98:5: E265 block comment should start with '# '
    #reject if it's exactly 11 digits and does NOTnot start with +1
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:100:80: E501 line too long (106 > 79 characters)
        print(f"{phone_number} is not a valid US phone number, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:101:19: E262 inline comment should start with '# '
        return 1  #reject only if it's 11 digits and NOT a `+1` number
                  ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:103:5: E265 block comment should start with '# '
    #if it's 11 digits but starts with 1, remove the leading 1
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:107:5: E265 block comment should start with '# '
    #ensure the final number is exactly 10 digits**
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:111:5: E265 block comment should start with '# '
    #if invalid, print the error message and return 1**
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:112:80: E501 line too long (102 > 79 characters)
    print(f"{phone_number} is not a valid US phone number, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:116:59: W291 trailing whitespace
""" Validating  zip codes, ensuring it is exactly 5 digits
                                                          ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:120:1: E302 expected 2 blank lines, found 1
def validate_zip(zip_code):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:121:5: E265 block comment should start with '# '
    #storing the original input
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:122:28: W291 trailing whitespace
    original_zip = zip_code
                           ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:123:4: E114 indentation is not a multiple of 4 (comment)
   #reject any zip codes that start with +
   ^
    Use indent_size (PEP8 says 4) spaces per indentation level.

For really old code that you don't want to mess up, you can continue
to use 8-space tabs.

Okay: a = 1
Okay: if a == 0:\n    a = 1
E111:   a = 1
E114:   # a = 1

Okay: for item in items:\n    pass
E112: for item in items:\npass
E115: for item in items:\n# Hi\n    pass

Okay: a = 1\nb = 2
E113: a = 1\n    b = 2
E116: a = 1\n    # b = 2
parse_file.py:123:4: E265 block comment should start with '# '
   #reject any zip codes that start with +
   ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:125:80: E501 line too long (102 > 79 characters)
        print(f"{original_zip} is not a valid US zip code, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:127:5: E265 block comment should start with '# '
    #removing all non-numeric characters
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:128:49: W291 trailing whitespace
    cleaned_zip = re.sub(r"[^\d]", "", zip_code)
                                                ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:129:5: E265 block comment should start with '# '
    #ensure it's exactly 5 digits
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:132:5: E265 block comment should start with '# '
    #if invalid, print the error message using the original input and return 1
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:133:80: E501 line too long (98 > 79 characters)
    print(f"{original_zip} is not a valid US zip code, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:140:1: W293 blank line contains whitespace

^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:143:1: E302 expected 2 blank lines, found 1
def process_each_emp(emp_list):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:144:5: E265 block comment should start with '# '
    #creating an empty list for storing valid phone numbers and zip codes
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:144:74: W291 trailing whitespace
    #creating an empty list for storing valid phone numbers and zip codes
                                                                         ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:153:21: W291 trailing whitespace
            continue
                    ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:155:10: E114 indentation is not a multiple of 4 (comment)
         #validate zip code before proceeding
         ^
    Use indent_size (PEP8 says 4) spaces per indentation level.

For really old code that you don't want to mess up, you can continue
to use 8-space tabs.

Okay: a = 1
Okay: if a == 0:\n    a = 1
E111:   a = 1
E114:   # a = 1

Okay: for item in items:\n    pass
E112: for item in items:\npass
E115: for item in items:\n# Hi\n    pass

Okay: a = 1\nb = 2
E113: a = 1\n    b = 2
E116: a = 1\n    # b = 2
parse_file.py:155:10: E116 unexpected indentation (comment)
         #validate zip code before proceeding
         ^
    Use indent_size (PEP8 says 4) spaces per indentation level.

For really old code that you don't want to mess up, you can continue
to use 8-space tabs.

Okay: a = 1
Okay: if a == 0:\n    a = 1
E111:   a = 1
E114:   # a = 1

Okay: for item in items:\n    pass
E112: for item in items:\npass
E115: for item in items:\n# Hi\n    pass

Okay: a = 1\nb = 2
E113: a = 1\n    b = 2
E116: a = 1\n    # b = 2
parse_file.py:155:10: E265 block comment should start with '# '
         #validate zip code before proceeding
         ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:157:23: W291 trailing whitespace
        if zip_c == 1:
                      ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:158:23: E262 inline comment should start with '# '
            continue  #skip this entry if zip is invalid
                      ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:163:75: W291 trailing whitespace
            emp["City"] = re.sub(r'\s+', ' ', emp["City"]).strip().title()
                                                                          ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:165:80: E501 line too long (84 > 79 characters)
            emp["Job Title"] = re.sub(r'\s+', ' ', emp["Job Title"]).strip().title()
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:166:1: W293 blank line contains whitespace

^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:167:9: E265 block comment should start with '# '
        #creating new variables for processing names and address lines separately
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:167:80: E501 line too long (81 > 79 characters)
        #creating new variables for processing names and address lines separately
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:169:42: E231 missing whitespace after ','
        address_lines = ["Address Line 1","Address Line 2"]
                                         ^
    Surround operators with the correct amount of whitespace.

- Always surround these binary operators with a single space on
  either side: assignment (=), augmented assignment (+=, -= etc.),
  comparisons (==, <, >, !=, <=, >=, in, not in, is, is not),
  Booleans (and, or, not).

- Each comma, semicolon or colon should be followed by whitespace.

- If operators with different priorities are used, consider adding
  whitespace around the operators with the lowest priorities.

Okay: i = i + 1
Okay: submitted += 1
Okay: x = x * 2 - 1
Okay: hypot2 = x * x + y * y
Okay: c = (a + b) * (a - b)
Okay: foo(bar, key='word', *args, **kwargs)
Okay: alpha[:-i]
Okay: [a, b]
Okay: (3,)
Okay: a[3,] = 1
Okay: a[1:4]
Okay: a[:4]
Okay: a[1:]
Okay: a[1:4:2]

E225: i=i+1
E225: submitted +=1
E225: x = x /2 - 1
E225: z = x **y
E225: z = 1and 1
E226: c = (a+b) * (a-b)
E226: hypot2 = x*x + y*y
E227: c = a|b
E228: msg = fmt%(errno, errmsg)
E231: ['a','b']
E231: foo(bar,baz)
E231: [{'a':'b'}]
parse_file.py:170:9: E265 block comment should start with '# '
        #proccesing first and last name
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:172:50: E231 missing whitespace after ','
            if key in emp and isinstance(emp[key],str):
                                                 ^
    Surround operators with the correct amount of whitespace.

- Always surround these binary operators with a single space on
  either side: assignment (=), augmented assignment (+=, -= etc.),
  comparisons (==, <, >, !=, <=, >=, in, not in, is, is not),
  Booleans (and, or, not).

- Each comma, semicolon or colon should be followed by whitespace.

- If operators with different priorities are used, consider adding
  whitespace around the operators with the lowest priorities.

Okay: i = i + 1
Okay: submitted += 1
Okay: x = x * 2 - 1
Okay: hypot2 = x * x + y * y
Okay: c = (a + b) * (a - b)
Okay: foo(bar, key='word', *args, **kwargs)
Okay: alpha[:-i]
Okay: [a, b]
Okay: (3,)
Okay: a[3,] = 1
Okay: a[1:4]
Okay: a[:4]
Okay: a[1:]
Okay: a[1:4:2]

E225: i=i+1
E225: submitted +=1
E225: x = x /2 - 1
E225: z = x **y
E225: z = 1and 1
E226: c = (a+b) * (a-b)
E226: hypot2 = x*x + y*y
E227: c = a|b
E228: msg = fmt%(errno, errmsg)
E231: ['a','b']
E231: foo(bar,baz)
E231: [{'a':'b'}]
parse_file.py:173:17: E265 block comment should start with '# '
                #removing leading and treiling spaces
                ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:173:54: W291 trailing whitespace
                #removing leading and treiling spaces
                                                     ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:175:17: E265 block comment should start with '# '
                #applying title casing to the first and last names
                ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:177:9: E265 block comment should start with '# '
        #proccesing address lines
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:182:17: E265 block comment should start with '# '
                #creating empty list for new addresses
                ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:182:55: W291 trailing whitespace
                #creating empty list for new addresses
                                                      ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:185:47: W291 trailing whitespace
                if word and word[0].isdigit():
                                              ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:186:55: E262 inline comment should start with '# '
                    new_address.append(word.lower())  #lowercase if starting with digit
                                                      ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:186:80: E501 line too long (87 > 79 characters)
                    new_address.append(word.lower())  #lowercase if starting with digit
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:188:60: E262 inline comment should start with '# '
                    new_address.append(word.capitalize())  #capitalize otherwise
                                                           ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:188:80: E501 line too long (80 > 79 characters)
                    new_address.append(word.capitalize())  #capitalize otherwise
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:190:47: E262 inline comment should start with '# '
            emp[key] = ' '.join(new_address)  #convert list back to string
                                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:193:80: E501 line too long (82 > 79 characters)
        emp["Company Email"] = generate_email(emp["First Name"], emp["Last Name"])
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:196:9: E265 block comment should start with '# '
        #add proccesed employees to valid employees
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:198:5: E265 block comment should start with '# '
    #returning list of dictionaries for valid employees
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment

===================== pylint =====================
************* Module parse_file
parse_file.py:1:11: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:2:9: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:11:34: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:13:39: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:24:65: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:31:49: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:46:67: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:88:0: C0301: Line too long (110/100) (line-too-long)
parse_file.py:100:0: C0301: Line too long (106/100) (line-too-long)
parse_file.py:112:0: C0301: Line too long (102/100) (line-too-long)
parse_file.py:116:58: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:122:27: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:125:0: C0301: Line too long (102/100) (line-too-long)
parse_file.py:128:48: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:144:73: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:153:20: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:157:22: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:163:74: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:166:0: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:173:53: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:182:54: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:185:46: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:1:0: C0114: Missing module docstring (missing-module-docstring)
parse_file.py:6:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:10:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:17:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:22:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:27:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:31:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:46:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:54:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:81:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:83:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:116:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:120:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:137:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:143:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:184:24: E0606: Possibly using variable 'words' before assignment (possibly-used-before-assignment)
parse_file.py:186:20: E0606: Possibly using variable 'new_address' before assignment (possibly-used-before-assignment)

------------------------------------------------------------------
Your code has been rated at 5.20/10 (previous run: 5.20/10, +0.00)


============================================================================ 
=================================================== 
Python LINTER for: {parse_file}    
=================================================== 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
============================================================================ 

Generating Linter results for: parse_file.py on: 24/02/2025 22:24:13
========== pycodestyle (formerly pep8) ==========
parse_file.py:1:59: W291 trailing whitespace
''' Cleaning, fomating and validating employee information
                                                          ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:9:68: W291 trailing whitespace
'''Reading the json file content and passing for further proccesing
                                                                   ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:12:1: E302 expected 2 blank lines, found 1
def get_json_content(file):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:13:5: E265 block comment should start with '# '
    #opening and reading json file
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:13:35: W291 trailing whitespace
    #opening and reading json file
                                  ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:15:9: E265 block comment should start with '# '
        #returns a list of dictionaries
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:15:40: W291 trailing whitespace
        #returns a list of dictionaries
                                       ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:18:1: E305 expected 2 blank lines after class or function definition, found 1
''' Generate the company email using the format:
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:23:1: E302 expected 2 blank lines, found 1
def generate_email(first_name, last_name):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:24:5: E265 block comment should start with '# '
    #concatenating using a function
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:27:1: E305 expected 2 blank lines after class or function definition, found 1
''' Generating new formatted JSON files for each
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:30:1: E302 expected 2 blank lines, found 1
def generate_formatted_file(emp_list, orig_path):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:31:5: E265 block comment should start with '# '
    #getting the directory where the original file is located
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:33:5: E265 block comment should start with '# '
    #extracting the base file name
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:35:5: E265 block comment should start with '# '
    #spliting the base name into name and extension
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:37:5: E265 block comment should start with '# '
    #creating the new file name with "_formatted.json" appended.
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:39:5: E265 block comment should start with '# '
    #writing the formatted employee data to the new JSON file.
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:43:1: E305 expected 2 blank lines after class or function definition, found 1
''' Calculating salaryes according to the base salary per possition
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:49:1: E302 expected 2 blank lines, found 1
def generate_salary(job_id, state):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:50:5: E265 block comment should start with '# '
    #extracting department from job_id
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:52:5: E265 block comment should start with '# '
    #base salary for each department
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:58:5: E265 block comment should start with '# '
    #retrieving base salary
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:62:5: E265 block comment should start with '# '
    #checking if the person is a manager
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:64:5: E265 block comment should start with '# '
    #applying salary increases based on conditions
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:66:31: E262 inline comment should start with '# '
        base_salary *= 1.065  #manager in bonus state gets 6.5% increase
                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:68:31: E262 inline comment should start with '# '
        base_salary *= 1.05   #manager in non-bonus state gets 5% increase
                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:70:31: E262 inline comment should start with '# '
        base_salary *= 1.015  #non-managers in bonus states get 1.5% increase
                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:71:5: E265 block comment should start with '# '
    #rounding the amount and passing it as integer
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:74:1: E305 expected 2 blank lines after class or function definition, found 1
''' Validating phone numbers to ensure they are formated correctly '''
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:76:1: E302 expected 2 blank lines, found 1
def validate_phone_number(phone_number):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:78:5: E265 block comment should start with '# '
    #allowing numbers with +1 to pass through
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:80:38: E262 inline comment should start with '# '
        if " " not in phone_number:  #if +1 number has no spaces, reject it
                                     ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:81:80: E501 line too long (110 > 79 characters)
            print(f"{phone_number} is not a valid US phone number, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:85:5: E265 block comment should start with '# '
    #cleaning the Number removing `()`, `-`, spaces
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:86:80: E501 line too long (99 > 79 characters)
    phone_number = phone_number.replace("(", "").replace(")", "").replace(" ", "").replace("-", "")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:88:5: E265 block comment should start with '# '
    #remove all remaining non-numeric characters
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:91:5: E265 block comment should start with '# '
    #reject if it's exactly 11 digits and does NOTnot start with +1
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:93:80: E501 line too long (106 > 79 characters)
        print(f"{phone_number} is not a valid US phone number, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:94:19: E262 inline comment should start with '# '
        return 1  #reject only if it's 11 digits and NOT a `+1` number
                  ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:96:5: E265 block comment should start with '# '
    #if it's 11 digits but starts with 1, remove the leading 1
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:100:5: E265 block comment should start with '# '
    #ensure the final number is exactly 10 digits**
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:104:5: E265 block comment should start with '# '
    #if invalid, print the error message and return 1**
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:105:80: E501 line too long (102 > 79 characters)
    print(f"{phone_number} is not a valid US phone number, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:108:1: E305 expected 2 blank lines after class or function definition, found 1
""" Validating  zip codes, ensuring it is exactly 5 digits
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:111:1: E302 expected 2 blank lines, found 1
def validate_zip(zip_code):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:112:5: E265 block comment should start with '# '
    #storing the original input
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:114:5: E265 block comment should start with '# '
    #reject any zip codes that start with +
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:116:80: E501 line too long (102 > 79 characters)
        print(f"{original_zip} is not a valid US zip code, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:118:5: E265 block comment should start with '# '
    #removing all non-numeric characters
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:120:5: E265 block comment should start with '# '
    #ensure it's exactly 5 digits
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:123:5: E265 block comment should start with '# '
    #if invalid, print the error message using the original input and return 1
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:124:80: E501 line too long (98 > 79 characters)
    print(f"{original_zip} is not a valid US zip code, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:127:1: E305 expected 2 blank lines after class or function definition, found 1
'''Cleaning and formatting employee details for easier proccessing.
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:131:1: E302 expected 2 blank lines, found 1
def process_each_emp(emp_list):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:132:5: E265 block comment should start with '# '
    #creating an empty list for storing valid phone numbers and zip codes
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:143:10: E114 indentation is not a multiple of 4 (comment)
         #validate zip code before proceeding
         ^
    Use indent_size (PEP8 says 4) spaces per indentation level.

For really old code that you don't want to mess up, you can continue
to use 8-space tabs.

Okay: a = 1
Okay: if a == 0:\n    a = 1
E111:   a = 1
E114:   # a = 1

Okay: for item in items:\n    pass
E112: for item in items:\npass
E115: for item in items:\n# Hi\n    pass

Okay: a = 1\nb = 2
E113: a = 1\n    b = 2
E116: a = 1\n    # b = 2
parse_file.py:143:10: E116 unexpected indentation (comment)
         #validate zip code before proceeding
         ^
    Use indent_size (PEP8 says 4) spaces per indentation level.

For really old code that you don't want to mess up, you can continue
to use 8-space tabs.

Okay: a = 1
Okay: if a == 0:\n    a = 1
E111:   a = 1
E114:   # a = 1

Okay: for item in items:\n    pass
E112: for item in items:\npass
E115: for item in items:\n# Hi\n    pass

Okay: a = 1\nb = 2
E113: a = 1\n    b = 2
E116: a = 1\n    # b = 2
parse_file.py:143:10: E265 block comment should start with '# '
         #validate zip code before proceeding
         ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:146:23: E262 inline comment should start with '# '
            continue  #skip this entry if zip is invalid
                      ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:152:80: E501 line too long (84 > 79 characters)
            emp["Job Title"] = re.sub(r'\s+', ' ', emp["Job Title"]).strip().title()
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:153:9: E265 block comment should start with '# '
        #creating new variables for processing names and address lines separately
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:153:80: E501 line too long (81 > 79 characters)
        #creating new variables for processing names and address lines separately
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:155:42: E231 missing whitespace after ','
        address_lines = ["Address Line 1","Address Line 2"]
                                         ^
    Surround operators with the correct amount of whitespace.

- Always surround these binary operators with a single space on
  either side: assignment (=), augmented assignment (+=, -= etc.),
  comparisons (==, <, >, !=, <=, >=, in, not in, is, is not),
  Booleans (and, or, not).

- Each comma, semicolon or colon should be followed by whitespace.

- If operators with different priorities are used, consider adding
  whitespace around the operators with the lowest priorities.

Okay: i = i + 1
Okay: submitted += 1
Okay: x = x * 2 - 1
Okay: hypot2 = x * x + y * y
Okay: c = (a + b) * (a - b)
Okay: foo(bar, key='word', *args, **kwargs)
Okay: alpha[:-i]
Okay: [a, b]
Okay: (3,)
Okay: a[3,] = 1
Okay: a[1:4]
Okay: a[:4]
Okay: a[1:]
Okay: a[1:4:2]

E225: i=i+1
E225: submitted +=1
E225: x = x /2 - 1
E225: z = x **y
E225: z = 1and 1
E226: c = (a+b) * (a-b)
E226: hypot2 = x*x + y*y
E227: c = a|b
E228: msg = fmt%(errno, errmsg)
E231: ['a','b']
E231: foo(bar,baz)
E231: [{'a':'b'}]
parse_file.py:156:9: E265 block comment should start with '# '
        #proccesing first and last name
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:158:50: E231 missing whitespace after ','
            if key in emp and isinstance(emp[key],str):
                                                 ^
    Surround operators with the correct amount of whitespace.

- Always surround these binary operators with a single space on
  either side: assignment (=), augmented assignment (+=, -= etc.),
  comparisons (==, <, >, !=, <=, >=, in, not in, is, is not),
  Booleans (and, or, not).

- Each comma, semicolon or colon should be followed by whitespace.

- If operators with different priorities are used, consider adding
  whitespace around the operators with the lowest priorities.

Okay: i = i + 1
Okay: submitted += 1
Okay: x = x * 2 - 1
Okay: hypot2 = x * x + y * y
Okay: c = (a + b) * (a - b)
Okay: foo(bar, key='word', *args, **kwargs)
Okay: alpha[:-i]
Okay: [a, b]
Okay: (3,)
Okay: a[3,] = 1
Okay: a[1:4]
Okay: a[:4]
Okay: a[1:]
Okay: a[1:4:2]

E225: i=i+1
E225: submitted +=1
E225: x = x /2 - 1
E225: z = x **y
E225: z = 1and 1
E226: c = (a+b) * (a-b)
E226: hypot2 = x*x + y*y
E227: c = a|b
E228: msg = fmt%(errno, errmsg)
E231: ['a','b']
E231: foo(bar,baz)
E231: [{'a':'b'}]
parse_file.py:159:17: E265 block comment should start with '# '
                #removing leading and treiling spaces
                ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:161:17: E265 block comment should start with '# '
                #applying title casing to the first and last names
                ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:163:9: E265 block comment should start with '# '
        #proccesing address lines
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:168:17: E265 block comment should start with '# '
                #creating empty list for new addresses
                ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:172:55: E262 inline comment should start with '# '
                    new_address.append(word.lower())  #lowercase if starting with digit
                                                      ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:172:80: E501 line too long (87 > 79 characters)
                    new_address.append(word.lower())  #lowercase if starting with digit
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:174:60: E262 inline comment should start with '# '
                    new_address.append(word.capitalize())  #capitalize otherwise
                                                           ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:174:80: E501 line too long (80 > 79 characters)
                    new_address.append(word.capitalize())  #capitalize otherwise
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:176:47: E262 inline comment should start with '# '
            emp[key] = ' '.join(new_address)  #convert list back to string
                                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:179:80: E501 line too long (82 > 79 characters)
        emp["Company Email"] = generate_email(emp["First Name"], emp["Last Name"])
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:182:9: E265 block comment should start with '# '
        #add proccesed employees to valid employees
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:184:5: E265 block comment should start with '# '
    #returning list of dictionaries for valid employees
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment

===================== pylint =====================
************* Module parse_file
parse_file.py:13:34: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:15:39: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:81:0: C0301: Line too long (110/100) (line-too-long)
parse_file.py:93:0: C0301: Line too long (106/100) (line-too-long)
parse_file.py:105:0: C0301: Line too long (102/100) (line-too-long)
parse_file.py:116:0: C0301: Line too long (102/100) (line-too-long)
parse_file.py:9:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:12:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:18:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:23:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:27:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:30:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:43:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:49:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:74:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:76:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:108:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:111:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:127:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:131:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:170:24: E0606: Possibly using variable 'words' before assignment (possibly-used-before-assignment)
parse_file.py:172:20: E0606: Possibly using variable 'new_address' before assignment (possibly-used-before-assignment)

------------------------------------------------------------------
Your code has been rated at 7.00/10 (previous run: 5.20/10, +1.80)


============================================================================ 
=================================================== 
Python LINTER for: {parse_file}    
=================================================== 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
============================================================================ 

Generating Linter results for: parse_file.py on: 24/02/2025 22:26:35
========== pycodestyle (formerly pep8) ==========
parse_file.py:12:1: E302 expected 2 blank lines, found 1
def get_json_content(file):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:13:5: E265 block comment should start with '# '
    #opening and reading json file
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:13:35: W291 trailing whitespace
    #opening and reading json file
                                  ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:15:9: E265 block comment should start with '# '
        #returns a list of dictionaries
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:15:40: W291 trailing whitespace
        #returns a list of dictionaries
                                       ^
    Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
parse_file.py:18:1: E305 expected 2 blank lines after class or function definition, found 1
''' Generate the company email using the format:
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:23:1: E302 expected 2 blank lines, found 1
def generate_email(first_name, last_name):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:24:5: E265 block comment should start with '# '
    #concatenating using a function
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:27:1: E305 expected 2 blank lines after class or function definition, found 1
''' Generating new formatted JSON files for each
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:30:1: E302 expected 2 blank lines, found 1
def generate_formatted_file(emp_list, orig_path):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:31:5: E265 block comment should start with '# '
    #getting the directory where the original file is located
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:33:5: E265 block comment should start with '# '
    #extracting the base file name
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:35:5: E265 block comment should start with '# '
    #spliting the base name into name and extension
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:37:5: E265 block comment should start with '# '
    #creating the new file name with "_formatted.json" appended.
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:39:5: E265 block comment should start with '# '
    #writing the formatted employee data to the new JSON file.
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:43:1: E305 expected 2 blank lines after class or function definition, found 1
''' Calculating salaryes according to the base salary per possition
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:49:1: E302 expected 2 blank lines, found 1
def generate_salary(job_id, state):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:50:5: E265 block comment should start with '# '
    #extracting department from job_id
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:52:5: E265 block comment should start with '# '
    #base salary for each department
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:58:5: E265 block comment should start with '# '
    #retrieving base salary
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:62:5: E265 block comment should start with '# '
    #checking if the person is a manager
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:64:5: E265 block comment should start with '# '
    #applying salary increases based on conditions
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:66:31: E262 inline comment should start with '# '
        base_salary *= 1.065  #manager in bonus state gets 6.5% increase
                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:68:31: E262 inline comment should start with '# '
        base_salary *= 1.05   #manager in non-bonus state gets 5% increase
                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:70:31: E262 inline comment should start with '# '
        base_salary *= 1.015  #non-managers in bonus states get 1.5% increase
                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:71:5: E265 block comment should start with '# '
    #rounding the amount and passing it as integer
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:74:1: E305 expected 2 blank lines after class or function definition, found 1
''' Validating phone numbers to ensure they are formated correctly '''
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:76:1: E302 expected 2 blank lines, found 1
def validate_phone_number(phone_number):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:78:5: E265 block comment should start with '# '
    #allowing numbers with +1 to pass through
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:80:38: E262 inline comment should start with '# '
        if " " not in phone_number:  #if +1 number has no spaces, reject it
                                     ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:81:80: E501 line too long (110 > 79 characters)
            print(f"{phone_number} is not a valid US phone number, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:85:5: E265 block comment should start with '# '
    #cleaning the Number removing `()`, `-`, spaces
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:86:80: E501 line too long (99 > 79 characters)
    phone_number = phone_number.replace("(", "").replace(")", "").replace(" ", "").replace("-", "")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:88:5: E265 block comment should start with '# '
    #remove all remaining non-numeric characters
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:91:5: E265 block comment should start with '# '
    #reject if it's exactly 11 digits and does NOTnot start with +1
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:93:80: E501 line too long (106 > 79 characters)
        print(f"{phone_number} is not a valid US phone number, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:94:19: E262 inline comment should start with '# '
        return 1  #reject only if it's 11 digits and NOT a `+1` number
                  ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:96:5: E265 block comment should start with '# '
    #if it's 11 digits but starts with 1, remove the leading 1
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:100:5: E265 block comment should start with '# '
    #ensure the final number is exactly 10 digits**
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:104:5: E265 block comment should start with '# '
    #if invalid, print the error message and return 1**
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:105:80: E501 line too long (102 > 79 characters)
    print(f"{phone_number} is not a valid US phone number, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:108:1: E305 expected 2 blank lines after class or function definition, found 1
""" Validating  zip codes, ensuring it is exactly 5 digits
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:111:1: E302 expected 2 blank lines, found 1
def validate_zip(zip_code):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:112:5: E265 block comment should start with '# '
    #storing the original input
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:114:5: E265 block comment should start with '# '
    #reject any zip codes that start with +
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:116:80: E501 line too long (102 > 79 characters)
        print(f"{original_zip} is not a valid US zip code, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:118:5: E265 block comment should start with '# '
    #removing all non-numeric characters
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:120:5: E265 block comment should start with '# '
    #ensure it's exactly 5 digits
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:123:5: E265 block comment should start with '# '
    #if invalid, print the error message using the original input and return 1
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:124:80: E501 line too long (98 > 79 characters)
    print(f"{original_zip} is not a valid US zip code, skipping this employee entry...\n", end="")
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:127:1: E305 expected 2 blank lines after class or function definition, found 1
'''Cleaning and formatting employee details for easier proccessing.
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:131:1: E302 expected 2 blank lines, found 1
def process_each_emp(emp_list):
^
    Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
parse_file.py:132:5: E265 block comment should start with '# '
    #creating an empty list for storing valid phone numbers and zip codes
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:143:10: E114 indentation is not a multiple of 4 (comment)
         #validate zip code before proceeding
         ^
    Use indent_size (PEP8 says 4) spaces per indentation level.

For really old code that you don't want to mess up, you can continue
to use 8-space tabs.

Okay: a = 1
Okay: if a == 0:\n    a = 1
E111:   a = 1
E114:   # a = 1

Okay: for item in items:\n    pass
E112: for item in items:\npass
E115: for item in items:\n# Hi\n    pass

Okay: a = 1\nb = 2
E113: a = 1\n    b = 2
E116: a = 1\n    # b = 2
parse_file.py:143:10: E116 unexpected indentation (comment)
         #validate zip code before proceeding
         ^
    Use indent_size (PEP8 says 4) spaces per indentation level.

For really old code that you don't want to mess up, you can continue
to use 8-space tabs.

Okay: a = 1
Okay: if a == 0:\n    a = 1
E111:   a = 1
E114:   # a = 1

Okay: for item in items:\n    pass
E112: for item in items:\npass
E115: for item in items:\n# Hi\n    pass

Okay: a = 1\nb = 2
E113: a = 1\n    b = 2
E116: a = 1\n    # b = 2
parse_file.py:143:10: E265 block comment should start with '# '
         #validate zip code before proceeding
         ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:146:23: E262 inline comment should start with '# '
            continue  #skip this entry if zip is invalid
                      ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:152:80: E501 line too long (84 > 79 characters)
            emp["Job Title"] = re.sub(r'\s+', ' ', emp["Job Title"]).strip().title()
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:153:9: E265 block comment should start with '# '
        #creating new variables for processing names and address lines separately
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:153:80: E501 line too long (81 > 79 characters)
        #creating new variables for processing names and address lines separately
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:155:42: E231 missing whitespace after ','
        address_lines = ["Address Line 1","Address Line 2"]
                                         ^
    Surround operators with the correct amount of whitespace.

- Always surround these binary operators with a single space on
  either side: assignment (=), augmented assignment (+=, -= etc.),
  comparisons (==, <, >, !=, <=, >=, in, not in, is, is not),
  Booleans (and, or, not).

- Each comma, semicolon or colon should be followed by whitespace.

- If operators with different priorities are used, consider adding
  whitespace around the operators with the lowest priorities.

Okay: i = i + 1
Okay: submitted += 1
Okay: x = x * 2 - 1
Okay: hypot2 = x * x + y * y
Okay: c = (a + b) * (a - b)
Okay: foo(bar, key='word', *args, **kwargs)
Okay: alpha[:-i]
Okay: [a, b]
Okay: (3,)
Okay: a[3,] = 1
Okay: a[1:4]
Okay: a[:4]
Okay: a[1:]
Okay: a[1:4:2]

E225: i=i+1
E225: submitted +=1
E225: x = x /2 - 1
E225: z = x **y
E225: z = 1and 1
E226: c = (a+b) * (a-b)
E226: hypot2 = x*x + y*y
E227: c = a|b
E228: msg = fmt%(errno, errmsg)
E231: ['a','b']
E231: foo(bar,baz)
E231: [{'a':'b'}]
parse_file.py:156:9: E265 block comment should start with '# '
        #proccesing first and last name
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:158:50: E231 missing whitespace after ','
            if key in emp and isinstance(emp[key],str):
                                                 ^
    Surround operators with the correct amount of whitespace.

- Always surround these binary operators with a single space on
  either side: assignment (=), augmented assignment (+=, -= etc.),
  comparisons (==, <, >, !=, <=, >=, in, not in, is, is not),
  Booleans (and, or, not).

- Each comma, semicolon or colon should be followed by whitespace.

- If operators with different priorities are used, consider adding
  whitespace around the operators with the lowest priorities.

Okay: i = i + 1
Okay: submitted += 1
Okay: x = x * 2 - 1
Okay: hypot2 = x * x + y * y
Okay: c = (a + b) * (a - b)
Okay: foo(bar, key='word', *args, **kwargs)
Okay: alpha[:-i]
Okay: [a, b]
Okay: (3,)
Okay: a[3,] = 1
Okay: a[1:4]
Okay: a[:4]
Okay: a[1:]
Okay: a[1:4:2]

E225: i=i+1
E225: submitted +=1
E225: x = x /2 - 1
E225: z = x **y
E225: z = 1and 1
E226: c = (a+b) * (a-b)
E226: hypot2 = x*x + y*y
E227: c = a|b
E228: msg = fmt%(errno, errmsg)
E231: ['a','b']
E231: foo(bar,baz)
E231: [{'a':'b'}]
parse_file.py:159:17: E265 block comment should start with '# '
                #removing leading and treiling spaces
                ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:161:17: E265 block comment should start with '# '
                #applying title casing to the first and last names
                ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:163:9: E265 block comment should start with '# '
        #proccesing address lines
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:168:17: E265 block comment should start with '# '
                #creating empty list for new addresses
                ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:172:55: E262 inline comment should start with '# '
                    new_address.append(word.lower())  #lowercase if starting with digit
                                                      ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:172:80: E501 line too long (87 > 79 characters)
                    new_address.append(word.lower())  #lowercase if starting with digit
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:174:60: E262 inline comment should start with '# '
                    new_address.append(word.capitalize())  #capitalize otherwise
                                                           ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:174:80: E501 line too long (80 > 79 characters)
                    new_address.append(word.capitalize())  #capitalize otherwise
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:176:47: E262 inline comment should start with '# '
            emp[key] = ' '.join(new_address)  #convert list back to string
                                              ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:179:80: E501 line too long (82 > 79 characters)
        emp["Company Email"] = generate_email(emp["First Name"], emp["Last Name"])
                                                                               ^
    Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
parse_file.py:182:9: E265 block comment should start with '# '
        #add proccesed employees to valid employees
        ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
parse_file.py:184:5: E265 block comment should start with '# '
    #returning list of dictionaries for valid employees
    ^
    Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment

===================== pylint =====================
************* Module parse_file
parse_file.py:13:34: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:15:39: C0303: Trailing whitespace (trailing-whitespace)
parse_file.py:81:0: C0301: Line too long (110/100) (line-too-long)
parse_file.py:93:0: C0301: Line too long (106/100) (line-too-long)
parse_file.py:105:0: C0301: Line too long (102/100) (line-too-long)
parse_file.py:116:0: C0301: Line too long (102/100) (line-too-long)
parse_file.py:9:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:12:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:18:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:23:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:27:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:30:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:43:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:49:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:74:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:76:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:108:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:111:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:127:0: W0105: String statement has no effect (pointless-string-statement)
parse_file.py:131:0: C0116: Missing function or method docstring (missing-function-docstring)
parse_file.py:170:24: E0606: Possibly using variable 'words' before assignment (possibly-used-before-assignment)
parse_file.py:172:20: E0606: Possibly using variable 'new_address' before assignment (possibly-used-before-assignment)

------------------------------------------------------------------
Your code has been rated at 7.00/10 (previous run: 7.00/10, +0.00)


============================================================================ 
